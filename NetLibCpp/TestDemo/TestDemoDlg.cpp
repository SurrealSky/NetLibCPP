
// TestDemoDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "TestDemo.h"
#include "TestDemoDlg.h"
#include "afxdialogex.h"
#include"Lock.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CTestDemoDlg 对话框



CTestDemoDlg::CTestDemoDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CTestDemoDlg::IDD, pParent)
	, mLog(_T(""))
	, dwServerIp(0)
	, dwPort(0)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CTestDemoDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT2, mLog);
	DDX_IPAddress(pDX, IDC_IPADDRESS1, dwServerIp);
	DDX_Text(pDX, IDC_EDIT1, dwPort);
}

BEGIN_MESSAGE_MAP(CTestDemoDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &CTestDemoDlg::OnBnClickedButton1)
	ON_MESSAGE(WM_UPDATELOGWIN, &CTestDemoDlg::OnUpdatelogwin)
	ON_BN_CLICKED(IDC_BUTTON2, &CTestDemoDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON3, &CTestDemoDlg::OnBnClickedButton3)
END_MESSAGE_MAP()


// CTestDemoDlg 消息处理程序

BOOL CTestDemoDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO:  在此添加额外的初始化代码
	pMainPanel = this;
	dwServerIp = 0x3A90891C;
	dwPort = 443;
	UpdateData(FALSE);
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CTestDemoDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CTestDemoDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CTestDemoDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

unsigned int CTestDemoDlg::clientid = -1;
CTestDemoDlg *CTestDemoDlg::pMainPanel = 0;

CRITICAL_SECTION cs_NetCallBack;
void __stdcall CTestDemoDlg::NetCallBack(unsigned int _socket, unsigned int msgType, unsigned char* msg, unsigned int bytes)
{
	CLock mLock(&cs_NetCallBack);
	mLock.Lock();
	switch (msgType)
	{
		case 0x0000:
		{
					   //新的连接
					   CTestDemoDlg::clientid = _socket;
					   if (pMainPanel)
					   {
						   pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0000, 0);
					   }
		} break;
		case 0x0001:
		{
					   //接收数据
					   pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0001, 0);
		} break;
		case 0x0002:
		{
					   //连接断开
					   CTestDemoDlg::clientid = -1;
					   if (pMainPanel)
					   {
						   pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0002, 0);
					   }
		}break;
		default:
		{
		} break;
	}
	mLock.UnLock();
}



//连接
void CTestDemoDlg::OnBnClickedButton1()
{
	// TODO:  在此添加控件通知处理程序代码
	UpdateData(TRUE);
	unsigned int iPortNr = -1;
	unsigned int iMaxNumberOfConnections = 1201;
	unsigned int iNrOfIOWorkers = 1;
	unsigned int iNrOfLogicalWorkers = 0;
	unsigned int iMaxNrOfFreeBuff = 0;
	unsigned int iMaxNrOfFreeContext = 0;
	bool bSendInOrder = true;
	bool bReadInOrder = true;
	unsigned int iNrOfPendlingReads = 4;
	if (StartTheSystem(iPortNr,
		iMaxNumberOfConnections,
		iNrOfIOWorkers,
		iNrOfLogicalWorkers,
		iMaxNrOfFreeBuff,
		iMaxNrOfFreeContext,
		bSendInOrder,
		bReadInOrder,
		iNrOfPendlingReads))
	{
		CStringA strIP;
		unsigned char *pIP = (unsigned char*)&dwServerIp;
		strIP.Format("%u.%u.%u.%u", *(pIP + 3), *(pIP + 2), *(pIP + 1), *pIP);
		if (OnConnectA((MainCallBack)CTestDemoDlg::NetCallBack, (unsigned char*)strIP.GetBuffer(0), dwPort, 0))
		{
			return;
		}
	}
	AfxMessageBox(L"连接失败");
}

afx_msg LRESULT CTestDemoDlg::OnUpdatelogwin(WPARAM wParam, LPARAM lParam)
{
	unsigned int code = wParam;
	switch (code)
	{
		case 0x0000:
		{
			mLog.Append(L"新连接...\r\n");
		}break;
		case 0x0001:
		{
			mLog.Append(L"接收数据...\r\n");
		}break;
		case 0x0002:
		{
			mLog.Append(L"连接断开...\r\n");
		}break;
		default:
		{
			mLog.Append(L"未知错误...\r\n");
		}break;
	}
	UpdateData(FALSE);
	return 0;
}

//断开
void CTestDemoDlg::OnBnClickedButton2()
{
	// TODO:  在此添加控件通知处理程序代码
	if (CTestDemoDlg::clientid != -1)
		OnDisconnect(CTestDemoDlg::clientid);
}

//发送
void CTestDemoDlg::OnBnClickedButton3()
{
	// TODO:  在此添加控件通知处理程序代码
	unsigned char buffer[] = { 0xAB, 0x00, 0x00, 0x03, 0x03, 0x4E, 0x20, 0x7A, 0x5E, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xEA, 0x00, 0x00, 0x00, 0x03, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x09, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6E, 0x6E, 0x75, 0x6D, 0x00, 0x00, 0x00, 0x09, 0x36, 0x30, 0x34, 0x30, 0x30, 0x33, 0x39, 0x36, 0x32, 0x00, 0x00, 0x00, 0x03, 0x73, 0x65, 0x71, 0x00, 0x00, 0x00, 0x02, 0x35, 0x34, 0x00, 0x00, 0x00, 0x0D, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x09, 0x36, 0x33, 0x37, 0x39, 0x32, 0x39, 0x32, 0x37, 0x33, 0x00, 0x00, 0x00, 0x0C, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x6F, 0x73, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x0A, 0x61, 0x6E, 0x64, 0x72, 0x6F, 0x69, 0x64, 0x2D, 0x32, 0x36, 0x00, 0x00, 0x00, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6B, 0x65, 0x79, 0x00, 0x00, 0x00, 0x45, 0x30, 0x43, 0x02, 0x01, 0x01, 0x04, 0x3C, 0x30, 0x3A, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04, 0x24, 0x00, 0x5E, 0x7A, 0x02, 0x03, 0x2F, 0x54, 0x06, 0x02, 0x04, 0x1C, 0x89, 0x90, 0x3A, 0x02, 0x04, 0xE4, 0x89, 0x90, 0x3A, 0x02, 0x03, 0x3D, 0x14, 0xBA, 0x02, 0x04, 0x1E, 0x8F, 0xFA, 0x3A, 0x02, 0x04, 0x35, 0x8F, 0xFA, 0x3A, 0x02, 0x04, 0x5B, 0xE6, 0x41, 0xD0, 0x02, 0x04, 0xAC, 0xF4, 0x5F, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x6E, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x0C, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x64, 0x75, 0x70, 0x61, 0x63, 0x6B, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x06, 0x72, 0x73, 0x61, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x08, 0x72, 0x73, 0x61, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x00, 0x00, 0x00, 0x80, 0xA9, 0xE5, 0x35, 0x69, 0x84, 0xE4, 0x03, 0x0A, 0x39, 0xB9, 0xAA, 0x86, 0xAA, 0x2D, 0x17, 0x95, 0x05, 0xBE, 0x7E, 0x64, 0xAB, 0x89, 0xDB, 0x6D, 0x6A, 0x72, 0x1E, 0x3F, 0xD3, 0xF0, 0x6D, 0xC2, 0x73, 0xD5, 0xF7, 0xCB, 0xC7, 0xAE, 0xAE, 0xA9, 0xB0, 0xD4, 0x41, 0xC2, 0x08, 0xF6, 0xFA, 0x5D, 0xA5, 0x07, 0x33, 0x83, 0xED, 0xE7, 0x62, 0x52, 0x2A, 0x54, 0xC6, 0x41, 0xD8, 0x47, 0x2D, 0x14, 0x20, 0xDF, 0xE5, 0x60, 0x63, 0x97, 0xE4, 0x2B, 0xF6, 0x65, 0x80, 0x2E, 0xA1, 0x7B, 0x15, 0x93, 0x41, 0x2B, 0xC6, 0xC2, 0x94, 0x60, 0x92, 0xFD, 0xA9, 0x2D, 0xC0, 0xE3, 0x50, 0x20, 0x26, 0xDD, 0xA1, 0x06, 0xF0, 0x1C, 0xF6, 0x61, 0x55, 0xB3, 0x0D, 0x49, 0x8C, 0x6A, 0x21, 0x72, 0x31, 0x3E, 0x44, 0xB5, 0xA2, 0x73, 0x73, 0x3E, 0x4F, 0xAD, 0xFA, 0x42, 0xB3, 0x4C, 0x93, 0x4A, 0x37, 0xF8, 0x00, 0x00, 0x00, 0x08, 0x66, 0x69, 0x6C, 0x65, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 0x00, 0x0A, 0x77, 0x78, 0x63, 0x68, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x06, 0x66, 0x69, 0x6C, 0x65, 0x69, 0x64, 0x00, 0x00, 0x00, 0xB4, 0x33, 0x30, 0x35, 0x38, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x35, 0x31, 0x33, 0x30, 0x34, 0x66, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x34, 0x39, 0x32, 0x37, 0x64, 0x32, 0x39, 0x39, 0x62, 0x30, 0x32, 0x30, 0x33, 0x32, 0x66, 0x35, 0x34, 0x63, 0x64, 0x30, 0x32, 0x30, 0x34, 0x39, 0x35, 0x33, 0x64, 0x61, 0x31, 0x37, 0x62, 0x30, 0x32, 0x30, 0x34, 0x35, 0x62, 0x39, 0x37, 0x35, 0x65, 0x32, 0x39, 0x30, 0x34, 0x32, 0x61, 0x37, 0x37, 0x37, 0x38, 0x37, 0x35, 0x37, 0x30, 0x36, 0x63, 0x36, 0x66, 0x36, 0x31, 0x36, 0x34, 0x35, 0x66, 0x33, 0x31, 0x33, 0x37, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x33, 0x31, 0x33, 0x33, 0x33, 0x31, 0x33, 0x37, 0x33, 0x34, 0x34, 0x30, 0x36, 0x33, 0x36, 0x38, 0x36, 0x31, 0x37, 0x34, 0x37, 0x32, 0x36, 0x66, 0x36, 0x66, 0x36, 0x64, 0x33, 0x37, 0x33, 0x35, 0x33, 0x33, 0x35, 0x66, 0x33, 0x31, 0x33, 0x35, 0x33, 0x33, 0x33, 0x36, 0x33, 0x36, 0x33, 0x34, 0x33, 0x36, 0x33, 0x36, 0x33, 0x39, 0x33, 0x36, 0x30, 0x32, 0x30, 0x34, 0x30, 0x31, 0x30, 0x34, 0x31, 0x38, 0x30, 0x32, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x00, 0x00, 0x00, 0x0B, 0x6C, 0x61, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x6F, 0x64, 0x65, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x05, 0x69, 0x70, 0x73, 0x65, 0x71, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x09, 0x77, 0x78, 0x6D, 0x73, 0x67, 0x66, 0x6C, 0x61, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x77, 0x78, 0x61, 0x75, 0x74, 0x6F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x06, 0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x0B, 0x6C, 0x61, 0x72, 0x67, 0x65, 0x73, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x0A, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x66, 0x6C, 0x61, 0x67, 0x00, 0x00, 0x00, 0x01, 0x30, };

	if (CTestDemoDlg::clientid != -1)
		SendPacket(CTestDemoDlg::clientid, buffer, sizeof(buffer));
}
